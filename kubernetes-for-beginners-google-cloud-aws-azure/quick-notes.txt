------------------------------

$ kubectl version

> WARNING: This version information is deprecated and will be replaced with the output from kubectl version --short.  Use --output=yaml|json to get the full version.
> Client Version: version.Info{Major:"1", Minor:"25", GitVersion:"v1.25.4", GitCommit:"872a965c6c6526caa949f0c6ac028ef7aff3fb78", GitTreeState:"clean", 
  BuildDate:"2022-11-09T13:36:36Z", GoVersion:"go1.19.3", Compiler:"gc", Platform:"linux/amd64"}
> Kustomize Version: v4.5.7
> Server Version: version.Info{Major:"1", Minor:"25", GitVersion:"v1.25.4-gke.1600", GitCommit:"0e55ef943b612cf213ba4abfd1e6e915b9832969", GitTreeState:"clean"

------------------------------

$ gcloud container clusters get-credentials seyda-test-cluster --zone us-central1-a --project airy-charmer-372622Fetching cluster endpoint and auth data.

> kubeconfig entry generated for seyda-test-cluster.

------------------------------

$ kubectl create deployment hello-world-rest-api --image=in28min/hello-world-rest-api:0.0.1.RELEASE

> deployment.apps/hello-world-rest-api created

------------------------------

$ kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080
service/hello-world-rest-api exposed

------------------------------

http://35.188.37.44:8080

{healthy:true}

------------------------------

http://35.188.37.44:8080/hello-world

Hello World V1 txbzq

------------------------------

http://35.188.37.44:8080/hello-world-bean

{"message":"Hello World"}

------------------------------

kubectl get events

------------------------------

kubectl get pod
kubectl get pods

------------------------------

kubectl get replicaset

------------------------------

kubectl get deployment

------------------------------

kubectl get service

------------------------------

single responsibility principle

kubectl create deployment -> deployment, replicaset & pod
kubectl expose deployment -> service

------------------------------

pods

kubectl get pods -o wide
some kind of wrapper for containers
each pod has unique IP address
a pod can contain more than one containers
container can talk to each other using localhost

kubectl explain pods

kubectl get pods
(then copy pod name and paste it to the end of the next command)
kubectl describe pod hello-world-rest-api-55d9d4c59d-txbzq

namespace of pod; lets to isolate clusters, then you can separate environments like DEV, QA
labels; you can link pods, replicasets, deployments, services by using selectors and labels
annotations; some kind of meta information

------------------------------

replicasets

kubectl get replicasets = kubectl get rs
ensures the number of pods running all the times

kubectl delete pods hello-world-rest-api-55d9d4c59d-txbzq
kubectl get replicasets
kubectl get pods

[deleted pod ] hello-world-rest-api-55d9d4c59d-txbzq
[new instance] hello-world-rest-api-55d9d4c59d-l9f7p

kubectl scale deployment hello-world-rest-api --replicas=3
kubectl get pods

hello-world-rest-api-55d9d4c59d-2nsgv
hello-world-rest-api-55d9d4c59d-7ptkb
hello-world-rest-api-55d9d4c59d-l9f7p

kubectl get events
kubectl get events --sort-by=.metadata.creationTimestamp

kubectl explain replicaset

------------------------------

deployment

kubectl get rs -o wide
kubectl set image deployment hello-world-rest-api hello-world-rest-api=DUMMY_IMAGE:TEST
kubectl get rs -o wide
kubectl get pods

kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.2.RELEASE

------------------------------

services

allows us to receive traffic through a permanent lifetime address
fe our IP address is http://35.188.37.44:8080/ with port 8080

kubectl get pods -o wide
NAME                                    READY   STATUS    RESTARTS   AGE   IP          NODE                                                NOMINATED NODE   READINESS GATES
hello-world-rest-api-75466dc657-9tbcr   1/1     Running   0          23m   10.0.1.6    gke-seyda-test-cluster-default-pool-7c83051e-zn4f   <none>           <none>
hello-world-rest-api-75466dc657-fdg9r   1/1     Running   0          23m   10.0.2.11   gke-seyda-test-cluster-default-pool-7c83051e-hhzs   <none>           <none>
hello-world-rest-api-75466dc657-prgqx   1/1     Running   0          62s   10.0.0.6    gke-seyda-test-cluster-default-pool-7c83051e-qj7p   <none>           <none>

kubectl delete pods hello-world-rest-api-75466dc657-fdg9r

kubectl get pods -o wide
NAME                                    READY   STATUS    RESTARTS   AGE   IP          NODE                                                NOMINATED NODE   READINESS GATES
hello-world-rest-api-75466dc657-9tbcr   1/1     Running   0          24m   10.0.1.6    gke-seyda-test-cluster-default-pool-7c83051e-zn4f   <none>           <none>
hello-world-rest-api-75466dc657-p929g   1/1     Running   0          3s    10.0.2.12   gke-seyda-test-cluster-default-pool-7c83051e-hhzs   <none>           <none>
hello-world-rest-api-75466dc657-prgqx   1/1     Running   0          2m    10.0.0.6    gke-seyda-test-cluster-default-pool-7c83051e-qj7p   <none>           <none>

remark that -> IP changed.

kubectl get services
NAME                   TYPE           CLUSTER-IP   EXTERNAL-IP    PORT(S)          AGE
hello-world-rest-api   LoadBalancer   10.4.1.133   35.188.37.44   8080:32253/TCP   5h3m
kubernetes             ClusterIP      10.4.0.1     <none>         443/TCP          33h

ClusterIP, can only be accessed from inside the cluster
we will not be able to access this service from outside the cluster
there is no external IP, <none>
if we have any services which are directly consumed inside our cluster,
we can have them use a ClusterIP

------------------------------

Master Node

API Server (kube-apiserver)
Distributed Database (etcd)
Scheduler (kube-scheduler)
Controller Manager (kube-controller-manager)

Worker Node / NODE

Node Agent (kubelet) ; monitor whats happenint on the node, communicate back master node
Networking Component (kube-proxy)
Container Runtime (CRI container runtime interface - docker, rkt rocket cli etc)
PODS (multiple pods running containers)

OCI open container interface

kubectl get componentstatuses

------------------------------

GCP GCE GKE regions & zones

------------------------------

docker run -p 8080:8080 seydanurdemir/hello-world-rest-api:0.0.4-SNAPSHOT
docker push seydanurdemir/hello-world-rest-api:0.0.4-SNAPSHOT

------------------------------

gcloud init
gcloud auth login

------------------------------

powershell

$ Get-ExecutionPolicy
> Restricted
$ Set-ExecutionPolicy AllSigned
$ Get-ExecutionPolicy
> AllSigned

cmd

$ choco
> Chocolatey v1.2.1

Step #1

$ choco install kubernetes-cli
> Chocolatey installed 1/1 packages.
  See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).

Step #2

$ kubectl version --client
> Client Version: version.Info{Major:"1", Minor:"22", 
  GitVersion:"v1.22.5", GitCommit:"5c99e2ac2ff9a3c549d9ca665e7bc05a3e18f07e", 
  GitTreeState:"clean", BuildDate:"2021-12-16T08:38:33Z", 
  GoVersion:"go1.16.12", Compiler:"gc", Platform:"windows/amd64"}

Step #3

# If you're using cmd.exe, run: cd %USERPROFILE%
$ cd ~
$ mkdir .kube
$ cd .kube

Step #4

New-Item config -type file

------------------------------

gcloud components install gke-gcloud-auth-plugin

------------------------------

gcloud init
gcloud auth login
gcloud container clusters get-credentials seyda-test-cluster --zone us-central1-a --project airy-charmer-372622

------------------------------

kubectl set image deployment hello-world-rest-api hello-world-rest-api=seydanurdemir/hello-world-rest-api:0.0.4-SNAPSHOT

$ kubectl rollout history deployment hello-world-rest-api
> deployment.apps/hello-world-rest-api
REVISION  CHANGE-CAUSE
1         <none>
2         <none>
3         <none>
4         <none>

kubectl set image deployment hello-world-rest-api hello-world-rest-api=seydanurdemir/hello-world-rest-api:0.0.4-SNAPSHOT --record

$ kubectl rollout history deployment hello-world-rest-api
> deployment.apps/hello-world-rest-api
REVISION  CHANGE-CAUSE
1         <none>
2         <none>
3         <none>
4         kubectl set image deployment hello-world-rest-api hello-world-rest-api=seydanurdemir/hello-world-rest-api:0.0.4-SNAPSHOT --record=true

kubectl rollout status deployment hello-world-rest-api
kubectl rollout undo deployment hello-world-rest-api --to-revision=3

kubectl get pods
kubectl logs hello-world-rest-api-79ff564454-d4qwq

GCP CLI
watch curl http://35.188.37.44:8080/hello-world

------------------------------

kubectl get deployment hello-world-rest-api
kubectl get deployment hello-world-rest-api -o wide
kubectl get deployment hello-world-rest-api -o yaml
kubectl get deployment hello-world-rest-api -o yaml > deployment.yaml

kubectl get service hello-world-rest-api
kubectl get service hello-world-rest-api -o wide
kubectl get service hello-world-rest-api -o yaml
kubectl get service hello-world-rest-api -o yaml > service.yaml

(change content of deployment.yaml, and then;)

kubectl apply -f deployment.yaml

------------------------------

kubectl delete all -l app=hello-world-rest-api
kubectl get all
needed to change the nodePort of the service
kubectl apply -f apply.yaml

old link : http://35.188.37.44:8080/
new link : http://34.70.158.39:8080/

curl 34.70.158.39:8080

------------------------------

kubectl diff -f apply.yaml
watch -n 0.1 curl 35.188.37.44:8080/hello-world

minReadySeconds, reduce release downtime

------------------------------

kind: ReplicaSet
delete strategy part
change nodePort

current link : http://35.188.37.44:8080/

curl 35.188.37.44:8080

------------------------------

mvn clean install
mvn spring-boot:run
mvn clean package

http://localhost:8080

in28minutes, dummy

http://localhost:8080/h2-console

jdbc:h2:mem:testdb, sa

docker push seydanurdemir/todo-web-application-h2:0.0.1-SNAPSHOT

------------------------------

kubectl get all
kubectl delete all -l app=hello-world-rest-api
kubectl get all

sessionAffinity: ClientIP
kubectl apply -f applyToDoApp.yaml
kubectl get all

kubectl get pods --all-namespaces
kubectl get pods -l app=todo-web-application-h2

kubectl get services --all-namespaces
kubectl get services --all-namespaces --sort-by=.spec.type

sorted as ClusterIP, LoadBalancer, NodePortcccccc

kubectl get services --all-namespaces --sort-by=.metadata.name

kubectl get deployment todo-web-application-h2 -o yaml > deploymentToDoApp.yaml
kubectl get service todo-web-application-h2 -o yaml > serviceToDoApp.yaml

kubectl cluster-info
kubectl cluster-info dump

kubectl top node
kubectl top pod

some shortcuts

rs replicaset
svc service
kubectl get svc
ev events
ns namespaces
no nodes
po pods

------------------------------

docker

------------------------------

aws

aws free tier
root user & iam user
iam, identity and access management
authentication & authorization

create groups named as Developers authorized by AdministratorAccess
create a user named as rootname + _dev = seydanurdemir_dev -> normal IAM user
create another user named as aws-kubernetes-user -> for only access key

download aws cli and eksctl
aws configure, access id and key

eksctl create cluster --name seydanurdemir-cluster --nodegroup-name seydanurdemir-cluster-node-group  --node-type t2.medium --nodes 3 --nodes-min 3 --nodes-max 7 --managed --asg-access --zones=us-east-1a,us-east-1b
eksctl create cluster --name seydanurdemir-cluster 
--nodegroup-name seydanurdemir-cluster-node-group  
--node-type t2.medium --nodes 3 --nodes-min 3 --nodes-max 7 
--managed --asg-access 
--zones=us-east-1a,us-east-1b

seydanurdemir/hello-world-rest-api:0.0.4-SNAPSHOT

kubectl create deployment hello-world-rest-api --image=seydanurdemir/hello-world-rest-api:0.0.4-SNAPSHOT
kubectl get deployment
kubectl get replicaset
kubectl get pod

kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080
kubectl get service

link: http://a0c617254444d45cb90996f1daa57eff-1869961138.us-east-1.elb.amazonaws.com:8080/

seydanurdemir/todo-web-application-h2:0.0.1-SNAPSHOT

kubectl create deployment todowebapp-h2 --image=seydanurdemir/todo-web-application-h2:0.0.1-SNAPSHOT
kubectl expose deployment todowebapp-h2 --type=LoadBalancer --port=8080

link: http://a39f67cdf19b3488b92501288d50e0c8-1741755172.us-east-1.elb.amazonaws.com:8080/login

mysql container; docker pull in28min/todo-web-application-mysql:0.0.1-SNAPSHOT

cd Desktop/aws-yamls

in aws; we need to apply StorageClass
aws ebs; elastic block store

! needed to add these to deployment.yamls
"
  selector:
    matchLabels:
      io.kompose.service: todo-web-application
  selector:
    matchLabels:
      io.kompose.service: mysql
"

kubectl apply -f mysql-database-data-volume-persistentvolumeclaim-aws.yaml,mysql-deployment.yaml,mysql-service.yaml

kubectl apply -f config-map.yaml,secret.yaml,todo-web-application-deployment.yaml,todo-web-application-service.yaml

# did not worked
echo -n dummytodos | base64

link: http://a057a1e4280844ec8b2ce647e495fe43-1686720758.us-east-1.elb.amazonaws.com:8080/

kubectl delete all -l app=hello-world-rest-api
kubectl delete all -l app=todowebapp-h2
kubectl delete all -l io.kompose.service=todo-web-application
kubectl delete all -l io.kompose.service=mysql

microservices

needed to change apiVersion from extensios/v1beta1 to apps/v1
refs: https://kubernetes.io/blog/2019/07/18/api-deprecations-in-1-16/

kubectl apply -f deployment04.yaml

currency-exchange
link: http://a5a6949a96d0f435694a19f55fa07137-2119658985.us-east-1.elb.amazonaws.com:8000/

kubectl apply -f deployment05.yaml

currency-conversion
link: http://a3978fa966184467e8c4032ae96cdbfd-659885946.us-east-1.elb.amazonaws.com:8100/

lets try

link: http://a5a6949a96d0f435694a19f55fa07137-2119658985.us-east-1.elb.amazonaws.com:8000/currency-exchange/from/USD/to/INR
{"id":10001,"from":"USD","to":"INR","conversionMultiple":65.00,"exchangeEnvironmentInfo":"currency-exchange-5b8786b7f5-jsj4c v1 jsj4c"}

link: http://a3978fa966184467e8c4032ae96cdbfd-659885946.us-east-1.elb.amazonaws.com:8100/currency-conversion/from/USD/to/INR/quantity/10
{"id":10001,"from":"USD","to":"INR","conversionMultiple":65.00,"quantity":10,"totalCalculatedAmount":650.00,"exchangeEnvironmentInfo":"currency-exchange-5b8786b7f5-jsj4c v1 jsj4c","conversionEnvironmentInfo":"currency-conversion-5d77dd45b7-5lc7h v1 5lc7h"}

kubectl delete all -l app=currency-conversion
kubectl delete all -l app=currency-exchange

kubectl get ingress
kubectl delete ingress xxx

eksctl delete cluster --name seydanurdemir-cluster

------------------------------

azure

cloud shell

------------------------------